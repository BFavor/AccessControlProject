var parsedUrl = new URL(window.location.href);

// Assignment 3: Query the database to retrieve ALL of its contents.
// Called in: query.html 
// If Successful: Display all entries in a database   
function query() {
    // Extract the JWT token from the cookie which is generated by checkTOTP()  and stored in browser
    const JWT = document.cookie
        .split("; ")
        .find((row) => row.startsWith("JWT="))?.split("=")[1];
    console.log("JWT:",JWT);
    if (!JWT) {
        alert("JWT token is missing! Please log in again.");
        return;
    }

    fetch("http://" + parsedUrl.host + "/query", {
        method: "GET",
        headers: {
            "Authorization": JWT, 
        },
    })
    .then((resp) => resp.text()) // the API Route will only return text 
    .then((data) => {
        document.getElementById("response").innerHTML = data;
    })
    .catch((err) => {
        console.log(err);
        alert("An error occurred while querying the database.");
    });
}


// added for roles assignment
function query2() {
    // Extract the JWT token from the cookie which is generated by checkTOTP()  and stored in browser
    const JWT = document.cookie
        .split("; ")
        .find((row) => row.startsWith("JWT="))?.split("=")[1];
    console.log("JWT:",JWT);
    if (!JWT) {
        alert("JWT token is missing! Please log in again.");
        return;
    }

    fetch("http://" + parsedUrl.host + "/query2", {
        method: "GET",
        headers: {
            "Authorization": JWT, 
        },
    })
    .then((resp) => resp.text()) // the API Route will only return text 
    .then((data) => {
        document.getElementById("response").innerHTML = data;
    })
    .catch((err) => {
        console.log(err);
        alert("An error occurred while querying the database.");
    });
}


// Assignment 1: Login using username and password, check if both are in the database. If successfull, go to totp.html
// Called in: index.html
// If Successful: Go to totp.html
function login() {
    let body = JSON.stringify({
        username: document.getElementById("username").value,
        password: document.getElementById("password").value
    });

    fetch("http://" + parsedUrl.host + ":3000/login", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: body
    })
    .then((resp) => {
        if (resp.status === 200) {
            return resp.text().then(() => {
                // ASSIGNMENT 3: Generate a cookie that just has the username because uh we need the username to generate a proper JWT token from checkTOTP()
                document.cookie = "username=" + document.getElementById("username").value;
                console.log("Cookie set:", document.cookie); // Debugging
                location.href = "http://" + parsedUrl.host + "/totp.html";
            });
        } else if (resp.status === 401) {
            alert("Username or Password is incorrect");
        } else {
            alert("Server Error");
        }
    })
    .catch((err) => {
        console.log(err);
    });
}


// Assignment 2: Generate a TOTP on the server side automatically, and a user side manually. Compare the two TOTP's 
// Called in: totp.html
// If Successful: Go to query.html
function checkTOTP() {
    const username = document.cookie
        .split("; ")
        .find((row) => row.startsWith("username="))?.split("=")[1];

    console.log("Retrieved username from cookie:", username);

    if (!username) {
        alert("Username is missing! Please log in again.");
        return;
    }

    let stringifiedBody = JSON.stringify({
        totp: document.getElementById("totpCode").value,
        username: username
    });

    fetch("http://" + parsedUrl.host + ":3000/checkTOTP", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: stringifiedBody
    })
    .then((resp) => {
        if (resp.status === 200) {
            return resp.text().then((token) => {
                document.cookie = `JWT=${token}`; // Removed Secure and HttpOnly for local testing                console.log("JWT Cookie set:", document.cookie); // Debugging
                location.href = "http://" + parsedUrl.host + "/query.html";
            });
        } else if (resp.status === 401) {
            alert("TOTP Code Incorrect");
        } else {
            alert("Server Error");
        }
    })
    .catch((err) => {
        console.log(err);
    });
}

